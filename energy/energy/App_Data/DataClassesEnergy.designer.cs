#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace energy.App_Data
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="energy")]
	public partial class DataClassesEnergyDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Определения метода расширяемости
    partial void OnCreated();
    partial void Insertmeasuring_values(measuring_values instance);
    partial void Updatemeasuring_values(measuring_values instance);
    partial void Deletemeasuring_values(measuring_values instance);
    partial void Insertmeters(meters instance);
    partial void Updatemeters(meters instance);
    partial void Deletemeters(meters instance);
    partial void Insertparameters(parameters instance);
    partial void Updateparameters(parameters instance);
    partial void Deleteparameters(parameters instance);
    #endregion
		
		public DataClassesEnergyDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["energyConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesEnergyDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesEnergyDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesEnergyDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesEnergyDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<measuring_values> measuring_values
		{
			get
			{
				return this.GetTable<measuring_values>();
			}
		}
		
		public System.Data.Linq.Table<meters> meters
		{
			get
			{
				return this.GetTable<meters>();
			}
		}
		
		public System.Data.Linq.Table<parameters> parameters
		{
			get
			{
				return this.GetTable<parameters>();
			}
		}
		
		public System.Data.Linq.Table<energy_report_view> energy_report_view
		{
			get
			{
				return this.GetTable<energy_report_view>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.measuring_values")]
	public partial class measuring_values : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _parametr_id;
		
		private int _meter_id;
		
		private System.Nullable<double> _value;
		
		private System.DateTime _value_dt;
		
		private EntityRef<meters> _meters;
		
		private EntityRef<parameters> _parameters;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Onparametr_idChanging(int value);
    partial void Onparametr_idChanged();
    partial void Onmeter_idChanging(int value);
    partial void Onmeter_idChanged();
    partial void OnvalueChanging(System.Nullable<double> value);
    partial void OnvalueChanged();
    partial void Onvalue_dtChanging(System.DateTime value);
    partial void Onvalue_dtChanged();
    #endregion
		
		public measuring_values()
		{
			this._meters = default(EntityRef<meters>);
			this._parameters = default(EntityRef<parameters>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_parametr_id", DbType="Int NOT NULL")]
		public int parametr_id
		{
			get
			{
				return this._parametr_id;
			}
			set
			{
				if ((this._parametr_id != value))
				{
					if (this._parameters.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onparametr_idChanging(value);
					this.SendPropertyChanging();
					this._parametr_id = value;
					this.SendPropertyChanged("parametr_id");
					this.Onparametr_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_meter_id", DbType="Int NOT NULL")]
		public int meter_id
		{
			get
			{
				return this._meter_id;
			}
			set
			{
				if ((this._meter_id != value))
				{
					if (this._meters.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onmeter_idChanging(value);
					this.SendPropertyChanging();
					this._meter_id = value;
					this.SendPropertyChanged("meter_id");
					this.Onmeter_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_value", DbType="Float")]
		public System.Nullable<double> value
		{
			get
			{
				return this._value;
			}
			set
			{
				if ((this._value != value))
				{
					this.OnvalueChanging(value);
					this.SendPropertyChanging();
					this._value = value;
					this.SendPropertyChanged("value");
					this.OnvalueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_value_dt", DbType="DateTime NOT NULL")]
		public System.DateTime value_dt
		{
			get
			{
				return this._value_dt;
			}
			set
			{
				if ((this._value_dt != value))
				{
					this.Onvalue_dtChanging(value);
					this.SendPropertyChanging();
					this._value_dt = value;
					this.SendPropertyChanged("value_dt");
					this.Onvalue_dtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="meters_measuring_values", Storage="_meters", ThisKey="meter_id", OtherKey="id", IsForeignKey=true)]
		public meters meters
		{
			get
			{
				return this._meters.Entity;
			}
			set
			{
				meters previousValue = this._meters.Entity;
				if (((previousValue != value) 
							|| (this._meters.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._meters.Entity = null;
						previousValue.measuring_values.Remove(this);
					}
					this._meters.Entity = value;
					if ((value != null))
					{
						value.measuring_values.Add(this);
						this._meter_id = value.id;
					}
					else
					{
						this._meter_id = default(int);
					}
					this.SendPropertyChanged("meters");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="parameters_measuring_values", Storage="_parameters", ThisKey="parametr_id", OtherKey="id", IsForeignKey=true)]
		public parameters parameters
		{
			get
			{
				return this._parameters.Entity;
			}
			set
			{
				parameters previousValue = this._parameters.Entity;
				if (((previousValue != value) 
							|| (this._parameters.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._parameters.Entity = null;
						previousValue.measuring_values.Remove(this);
					}
					this._parameters.Entity = value;
					if ((value != null))
					{
						value.measuring_values.Add(this);
						this._parametr_id = value.id;
					}
					else
					{
						this._parametr_id = default(int);
					}
					this.SendPropertyChanged("parameters");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.meters")]
	public partial class meters : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _caption;
		
		private EntitySet<measuring_values> _measuring_values;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OncaptionChanging(string value);
    partial void OncaptionChanged();
    #endregion
		
		public meters()
		{
			this._measuring_values = new EntitySet<measuring_values>(new Action<measuring_values>(this.attach_measuring_values), new Action<measuring_values>(this.detach_measuring_values));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_caption", DbType="Char(255) NOT NULL", CanBeNull=false)]
		public string caption
		{
			get
			{
				return this._caption;
			}
			set
			{
				if ((this._caption != value))
				{
					this.OncaptionChanging(value);
					this.SendPropertyChanging();
					this._caption = value;
					this.SendPropertyChanged("caption");
					this.OncaptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="meters_measuring_values", Storage="_measuring_values", ThisKey="id", OtherKey="meter_id")]
		public EntitySet<measuring_values> measuring_values
		{
			get
			{
				return this._measuring_values;
			}
			set
			{
				this._measuring_values.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_measuring_values(measuring_values entity)
		{
			this.SendPropertyChanging();
			entity.meters = this;
		}
		
		private void detach_measuring_values(measuring_values entity)
		{
			this.SendPropertyChanging();
			entity.meters = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.parameters")]
	public partial class parameters : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _caption;
		
		private string _measure_units;
		
		private EntitySet<measuring_values> _measuring_values;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OncaptionChanging(string value);
    partial void OncaptionChanged();
    partial void Onmeasure_unitsChanging(string value);
    partial void Onmeasure_unitsChanged();
    #endregion
		
		public parameters()
		{
			this._measuring_values = new EntitySet<measuring_values>(new Action<measuring_values>(this.attach_measuring_values), new Action<measuring_values>(this.detach_measuring_values));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_caption", DbType="Char(255) NOT NULL", CanBeNull=false)]
		public string caption
		{
			get
			{
				return this._caption;
			}
			set
			{
				if ((this._caption != value))
				{
					this.OncaptionChanging(value);
					this.SendPropertyChanging();
					this._caption = value;
					this.SendPropertyChanged("caption");
					this.OncaptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_measure_units", DbType="Char(255) NOT NULL", CanBeNull=false)]
		public string measure_units
		{
			get
			{
				return this._measure_units;
			}
			set
			{
				if ((this._measure_units != value))
				{
					this.Onmeasure_unitsChanging(value);
					this.SendPropertyChanging();
					this._measure_units = value;
					this.SendPropertyChanged("measure_units");
					this.Onmeasure_unitsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="parameters_measuring_values", Storage="_measuring_values", ThisKey="id", OtherKey="parametr_id")]
		public EntitySet<measuring_values> measuring_values
		{
			get
			{
				return this._measuring_values;
			}
			set
			{
				this._measuring_values.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_measuring_values(measuring_values entity)
		{
			this.SendPropertyChanging();
			entity.parameters = this;
		}
		
		private void detach_measuring_values(measuring_values entity)
		{
			this.SendPropertyChanging();
			entity.parameters = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.energy_report_view")]
	public partial class energy_report_view
	{
		
		private string _time_diff;
		
		private System.Nullable<double> _act_in;
		
		private System.Nullable<double> _act_out;
		
		private System.Nullable<double> _react_in;
		
		private System.Nullable<double> _react_ot;
		
		private System.DateTime _value_dt;
		
		private int _meter_id;
		
		public energy_report_view()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_time_diff", DbType="NVarChar(13)")]
		public string time_diff
		{
			get
			{
				return this._time_diff;
			}
			set
			{
				if ((this._time_diff != value))
				{
					this._time_diff = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_act_in", DbType="Float")]
		public System.Nullable<double> act_in
		{
			get
			{
				return this._act_in;
			}
			set
			{
				if ((this._act_in != value))
				{
					this._act_in = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_act_out", DbType="Float")]
		public System.Nullable<double> act_out
		{
			get
			{
				return this._act_out;
			}
			set
			{
				if ((this._act_out != value))
				{
					this._act_out = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_react_in", DbType="Float")]
		public System.Nullable<double> react_in
		{
			get
			{
				return this._react_in;
			}
			set
			{
				if ((this._react_in != value))
				{
					this._react_in = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_react_ot", DbType="Float")]
		public System.Nullable<double> react_ot
		{
			get
			{
				return this._react_ot;
			}
			set
			{
				if ((this._react_ot != value))
				{
					this._react_ot = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_value_dt", DbType="DateTime NOT NULL")]
		public System.DateTime value_dt
		{
			get
			{
				return this._value_dt;
			}
			set
			{
				if ((this._value_dt != value))
				{
					this._value_dt = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_meter_id", DbType="Int NOT NULL")]
		public int meter_id
		{
			get
			{
				return this._meter_id;
			}
			set
			{
				if ((this._meter_id != value))
				{
					this._meter_id = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
